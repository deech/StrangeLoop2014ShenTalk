#+TITLE: Shen: A Sufficiently Advanced Lisp
#+AUTHOR: Aditya Siram (@deech), Intoximeters, Inc.
#+OPTIONS: H:2 toc:f
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Madrid

* Shen
** Functions
  - Defining Function ...
    #+BEGIN_SRC shen
       (define welcome
        X nil -> (output "Welcome to ~A" X)
        X Y   -> (output "Welcome to ~A and ~A" X Y))
       (welcome "Strange Loop" nil) =>
            "Welcome to Strange Loop"
       (welcome "Strange Loop" "St. Louis") =>
            "Welcome to Strange Loop and St. Louis"

    #+END_SRC
** Typed Functions
   - Turn on typechecking, type signatures are required ...
     #+BEGIN_SRC shen
      (tc +)
     #+END_SRC
   - Simple Types
     #+BEGIN_SRC shen
     (define is-positive
       { number --> boolean }
       X -> (and (number? X) (>= X 0)))
     (is-positive -1) => false : boolean
     #+END_SRC
** Typed Functions
   - Polymorphic Types
     #+BEGIN_SRC shen
       (define map
         { (A --> B) --> (list A) --> (list B) }
         F [] -> []
         F [ X | XS ] -> [(F X) | (map F XS)])

       (map (function (+ 1)) [1 2 3]) =>
         [2 3 4] : (list number)
     #+END_SRC
   - Note the currying above ...
** Untyped Functions
   - Turn off typechecking, type signatures are optional ...
     #+BEGIN_SRC shen
      (tc -)
      (define is-positive
        X -> (and (number? X) (>= X 0)))
      (define map
        { (A --> B) --> (list A) --> (list B) }
        F [] -> []
        F [ X | XS ] -> [(F X) | (map F XS)])

      (is-positive 10) => true
      (map (/. X (+ X 1)) [1 2 3]) => [2 3 4]
     #+END_SRC
   - Notice no types in results \& the alternate lambda syntax
** Features
   - Optional typechecking
   - Very flexible type specification
   - (Prolog) Pattern matching
       #+BEGIN_SRC shen
         (define same
           X X -> true
           _ _ -> false)
       #+END_SRC
** Features
   - Full Prolog engine
   - Full parsing engine
   - Decompiles to KLambda (Scheme-like)
   - Your Shen = A Scheme interpreter + 45 primitive functions
     - if, and, or, cons ...
   - "A unifying meta-language ..."
** Web Application Demo
  - Backend in Ruby (Sinatra)
  - Frontend in JavaScript (Qooxdoo)
  - Common code in Shen
  - This is the important bit.
** Form Demo
   - Simple Login Screen
   - Check form inputs using identical Shen code.
** Form Demo
   - Validation data-structure
     #+BEGIN_SRC shen
       (set *model*
         (@v (@p "username"
                 (function (parses (function <alphas>))))
             (@p "password"
                 (function parse-password))
          <>))
     #+END_SRC
   - This is a global variable!
   - And a function that runs the validator ...
     #+BEGIN_SRC shen
       (define run-validator
         nil   Key -> false
         Value Key ->
         (let Validator (lookup (value *model*) Key)
           (Validator Value)))
     #+END_SRC
** Form Demo
   - The lookup function ...
     #+BEGIN_SRC shen
        (define lookup
         (@v (@p Key Validator) _) Key -> Validator
         (@v _ PS) Key -> (lookup PS Key)
         <> Key -> (error "No validator for ~A." Key))
     #+END_SRC
   - Notice use of unification!
** Form Demo
   - The username parser is standard
     #+BEGIN_SRC shen
      (defcc <alphas>
       <alpha> <alphas> := [<alpha> | <alphas> ];
       <alpha> := [<alpha>])
     #+END_SRC
     #+BEGIN_SRC
       (compile (function <alphas>)
                (string->bytes "abcdef")) =>
          [97 98 99 100 101 102]
     #+END_SRC
** Check Parser Output
   - Check the parser runs
     #+BEGIN_SRC
     (define parses
       Parser Input ->
       (trap-error
         (do
          (compile
           (function Parser)
           (shen.string->bytes Input))
          true)
         (/. E false)))
     #+END_SRC
   - `do` macro for imperative programming
   - `trap-error` for exceptions
** Form Demo
   - The password parser is more interesting
     #+BEGIN_SRC shen
        (defcc <password>
         shen.<digit> <password>
             := [(function add-digit) | <password>];
         X <password>
             := [(function add-special) | <password>]
                  where (element? X (shen.string->bytes "_!"));
         shen.<alpha> <password>
             := [(function add-alpha) | <password>];
         <e> := []
         )
     #+END_SRC
     - User input is translated into function!
** Form Demo
   - Parsing forms a chain of functions
     #+BEGIN_SRC shen
       "Hi123!_"
          =>
       [
        (function add-alpha)
        (function add-alpha)
        (function add-digit)
        (function add-digit)
        (function add-digit)
        (function add-special)
        (function add-special)
       ]
     #+END_SRC
** Form Demo
   - Add functions
     #+BEGIN_SRC shen
      (define add-alpha
        (@p Alpha Digit Special) ->
          (@p (+ Alpha 1) Digit Special))
      (define add-digit
        (@p Alpha Digit Special) ->
          (@p Alpha (+ 1 Digit) Special))
      (define add-special
        (@p Alpha Digit Special) ->
          (@p Alpha Digit (+ 1 Special)))
     #+END_SRC
** Form Demo
   - Compose them!
     #+BEGIN_SRC shen
       (shen.compose
         [
          (function add-alpha)
          (function add-digit)
           ...
          ]
          (@p 0 0 0))

       "Hi123_!" => (@p 2 3 2)

       (define validate-password
         (@p Alpha Digit Special) ->
           (and (= Alpha Digit)
                (not (= Special 0))))
     #+END_SRC
** Form Demo
   - Ruby/JavaScript hookup
     #+BEGIN_SRC shen
       Shen.call_by_name(      shen.send(
          "run-validator",      "run-validator",
          [value, "password"]   password, "password"
        )                       )
     #+END_SRC
** Counter
  - Increment a counter over HTTP
  - Make it type safe.
  - Shen functions ...
    #+BEGIN_SRC shen
    (define string->positive-number
      { (readable string) --> positive-number }
      X -> (make-positive (toNumber X)))
    (define add-positive
      { positive-number --> positive-number -->
        positive-number }
      X Y -> (+ X Y))
    (define is-positive
      { number --> boolean }
      X -> (and (number? X) (>= X 0)))
    #+END_SRC
** Counter
  - Type specification
   #+BEGIN_SRC shen
   (datatype positive-number
     X : positive-number;
     Y : positive-number;
     _________________________
     (+ X Y) : positive-number;

     ...
    )
   #+END_SRC
  - To show `(+ X Y)` inhabits `positive-number`
    - Show `X` inhabits `positive-number` *and*
    - Show `Y` inhabits `positive-number`
** Counter
   - So how do you make a `positive-number`? Verified types ...
     #+BEGIN_SRC shen
     (datatype positive-number
       ...

       _________________________________________________
       (is-positive X) : verified >> X : positive-number;
      )
     #+END_SRC
   - Note nothing above the bar
   - If `(is-positive X)' is in the list of assumptions,
     - `X : positive-number` is proven!
** Counter
   - Basically include a `(is-positive X)` guard ...
     #+BEGIN_SRC shen
     (define make-positive
       { number --> positive-number }
         X -> X where (is-positive X)
         X -> (error "~A is not a positive number" X))
     #+END_SRC
   - Typechecker 'sees' the (is-positive X) and rubber-stamps `make-positive`.
** Counter
   - Parsing a string to a number using Shen's own parser ...
     #+BEGIN_SRC shen
     (defcc <digits>
       <digit> <digits> := [<digit> | <digits> ];
       <digit> := [<digit>])

     (defcc <trimmed-digits>
       <whitespaces> <digits> <whitespaces> := <digits>;
       <digits> <whitespaces> := <digits>;
       <whitespaces> <digits> := <digits>;
       <digits> := <digits>)

     (compile (function <trimmed-digits>)
              (string->bytes "  123 ")) =>
        [1 2 3]
     #+END_SRC
** Counter
   - Run the parser
     #+BEGIN_SRC shen
     (define number-string-p
       X -> (let Result
              (trap-error
                (compile
                 (function <trimmed-digits>)
                 (shen.string->bytes X))
                (/. E (do (pr E) (fail))))
              (not (= Result (fail)))))

     (declare number-string-p [string --> boolean])
     #+END_SRC
   - Note the type signature after the fact.
   - Tell the typechecker the type of dynamic code!
** Counter
   - Now add the final rule to the datatype ...
     #+BEGIN_SRC shen
       (datatype positive-number
          ....
          _________________________________
          (number-string-p X) : verified >>
          X : (readable string);
       )
      (define make-readable
        { string --> (readable string) }
        X -> X where (number-string-p X)
        X -> (error "~A is not a number" X))
     #+END_SRC
   - Everything along the chain is typechecked!
** JSON Typing
   - JSON -> Internal Representation
   #+BEGIN_SRC shen
     {                      [object
      auth:                  (@p "auth"
       {                       [object
         user: "someuser",       (@p "user" "someuser")
         pass: "somepass"        (@p "pass" "somepass")
       }                       ])
      first: "Joe",          (@p "first" "Joe")
      last: "User",          (@p "last" "User")
      phone: [314 555 5555]  (@p "phone" [314 555 5555])
     }                      ]
   #+END_SRC
** JSON Typing
   - Internal representation -> type
#+BEGIN_SRC shen
  [object                      (object
   (@p "auth"                   ((kv (auth *
     [object                     (object
       (@p "user" "someuser")      ((kv (user * string))
       (@p "pass" "somepass")])     (kv (pass * string))))))
   (@p "first" "Joe")           ((kv (first * string))
   (@p "last" "User")           ((kv (last * string))
   (@p "phone" [314 555 5555])]  (kv (phone * (list number)))))))
#+END_SRC
** JSON Typing
   - Iterating over `[object ...]`
     #+BEGIN_SRC
     (datatype object-iterator
        ...
        let Separated (shen.cons_form
                        (separate (shen.decons XS)))
        Separated : KVS;
        ________________________
        [object | XS] : (object KVS);
      )
      (define separate
        [] -> []
        [X] -> [end X]
        [X | XS] -> [X , | (separate XS)]
        )
     #+END_SRC
     #+BEGIN_SRC
       [object a b c] => [ a , b , end c]
     #+END_SRC
** JSON Typing
   - Iterating over `[object ...]`
     #+BEGIN_SRC
      (datatype object-iterator
       ...

       X : KV;
       XS : KVS;
       ______________________
       [X , | XS] : (KV KVS);

       X : KV;
       ______________________
       [end X] : KV;
      )
     #+END_SRC
     #+BEGIN_SRC
      [object a b c] => (object (a-type (b-type (c-type))))
     #+END_SRC
** JSON Typing
   - Key value datatype:
     #+BEGIN_SRC
      (datatype kv
        X : (A * B);
        _____________
        [kv X] : (kv (A * B));
        )
     #+END_SRC
     #+BEGIN_SRC
       [kv (@p "hello" 1)] => (kv (string * number))
     #+END_SRC
** JSON Typing
   - Datatype for `user`:
     #+BEGIN_SRC shen
      (datatype user-type
         X : (string * B);
         X : (user * B) >> P;
         __________________________________________________
         (= user (string->symbol (fst X))) : verified >> P;)
     #+END_SRC
   - Function to create `user`:
     #+BEGIN_SRC shen
       (define make-user
        { (string * A) --> (kv (user * A)) }
        X -> [kv X] where (= user (string->symbol (fst X))))
     #+END_SRC
** JSON Typing
   - Generate the `user` key types & functions:
     #+BEGIN_SRC shen
       (define key-type
         Key -> (string->symbol (make-string "~A-type" Key)))
       (define key-maker
         Key -> (string->symbol (make-string "make-~A" Key)))

       (define register-key
         Key ->
          (let Type (key-type Key)
               Func (key-maker Key)
            ...
            )
          )
     #+END_SRC
     #+BEGIN_SRC
       (register-key "user"): Type: user-type, Func: make-user
     #+END_SRC
** JSON Typing
   - Generate the `user` key types & functions:
 #+BEGIN_SRC shen
   (define register-key
     Key ->
      (let ...
       (do
        (eval
         [datatype Type
           X : [string * B];
           X : [Key * B] >> P;
           ________________________________________________
           [= Key [string->symbol [fst X]]] : verified >> P;]
         )
        ...)))
 #+END_SRC
** JSON Typing
   - Generate the `user` key types & functions:
 #+BEGIN_SRC shen
 (define register-key
   Key ->
    (let ...
      (do
       ...
       (eval
        [define Func
          FArg ->
           (shen.cons_form [kv FArg])
              where [= Key [string->symbol [fst FArg]]]
         ])
       ...)))
 #+END_SRC
** JSON Typing
   - Generate the `user` key types & functions:
#+BEGIN_SRC shen
(define register-key
  Key ->
   (let ...
     (do
      ...
      (declare Func [[string * A] --> [kv [Key * A]]])
      nil)))
#+END_SRC
** JSON Typing
   - Generate all the keys
      #+BEGIN_SRC shen
         [object
          (@p "auth"
            [object
              (@p "user" "someuser")
              (@p "pass" "somepass")])
          (@p "first" "Joe")
          (@p "last" "User")
          (@p "phone" [314 555 5555])]

        (map
          (function register-key)
          [auth user pass first last phone])
      #+END_SRC
** JSON Typing
   - Need to translate
     #+BEGIN_SRC shen
       [object
         (@p "auth"
           [object
             (@p "user" "someuser")
             (@p "pass" "somepass")])]
         =>
       [object
          (make-auth (@p "auth
             [object
               (make-user (@p "user" "someuser"))
               (make-pass (@p "pass" "somepass"))]))]
     #+END_SRC
** JSON Typing
   - Need a macro!
     #+BEGIN_SRC shen
       (defmacro my-awesome-obj-macro
         [obj-macro [cons object Pairs]] ->
           (shen.cons_form [object |
             (map
              (function obj-macro-helper)
              (shen.decons Pairs))]))

       (define obj-macro-helper
         [@p X Y] ->
           [(key-maker X)
            [@p X (obj-macro-helper Y)]]
         [object PS] -> (obj-macro [object PS])
         XS -> (map (function obj-macro-helper) XS)
                where (cons? XS)
         X -> X)
     #+END_SRC
** JSON Typing
   - Invoking
    #+BEGIN_SRC
     (obj-macro [object (@p "auth" ...) ..])
    #+END_SRC
   - And it works!
     #+BEGIN_SRC shen
       (object
        ((kv (auth *
         (object
           ((kv (user * string))
            (kv (pass * string))))))
        ((kv (first * string))
        ((kv (last * string))
         (kv (phone * (list number)))))))
     #+END_SRC
** JSON Typing
   - Further work:
     - Equality?
     - Subtyping?
     - Row polymorphism?

** JSON Typing
   - Type level equality!
     #+BEGIN_SRC shen
       (datatype object-iterator
         ...
         let ListA (kv->list (shen.decons A))
         let ListB (kv->list (shen.decons B))
         if (and (= (length ListA) (length ListB))
                 (same-keys-p ListA ListB))
         ________________________________
         X : (object B) >> Y : (object A);
         )
     #+END_SRC
     #+BEGIN_SRC shen
       (define same-keys-p
         [] _ -> true
         [X | XS] B -> (if (element? X B)
                           (same-keys-p XS B)
                           false))
     #+END_SRC
** JSON Typing
   - Test it:
     #+BEGIN_SRC shen
       (define works?
         { (object ((kv (key-a * number))
                    (kv (key-b * number)))) -->
           (object ((kv (key-b * number))
                    (kv (key-a * number)))) }
         X -> X)
     #+END_SRC
   - It works!
     #+BEGIN_SRC 
       (map (function register-key) [key-a key-b])
       > (works? (make-object [object (@p "key-a" 1)
                                      (@p "key-b" 1)]))
       [object ..] : (object ((kv (key-b * number))
                              (kv (key-a * number))))
     #+END_SRC
** Resources
  - The Shen website - http://www.shenlanguage.org/
  - The Book Of Shen - http://www.shenlanguage.org/tbos.html
  - Shen Google Group - https://groups.google.com/group/qilang?hl=en
** A Brief Interlude ...
   - Type Error ...
     #+BEGIN_SRC shen
      (+ 1 "hello")
       => type error
     #+END_SRC
   - Shen has a type level debugger!
     #+BEGIN_SRC shen
      (spy +)
     #+END_SRC
** A Brief Interlude
   - A type debugging session ...

     #+BEGIN_SRC shen

      (+ 1 "hello") =>
      ___________________________ 3 inferences
      ?- ((+ 1) "hello") : Var2

      __________________________ 12 inferences
      ?- (+ 1) : (Var5 --> Var2)
     #+END_SRC

** A Brief Interlude
   - Type debugging continued ...

     #+BEGIN_SRC shen
      ___________________________________17 inferences
      ?- + : (Var7 --> (Var5 --> Var2))

      ___________________________________20 inferences
      ?- 1 : number

      ___________________________________24 inferences
      ?- "hello" : number

      >
      type error
     #+END_SRC
** Side Effecting Type Declarations
   - Debug output in type declaration
     #+BEGIN_SRC shen
       (datatype positive-number

          if (do (output "I'm here!") (is-positive X))
          ___________________
          X : positive-number;)
     #+END_SRC
** Interop
   - Serializing/de-serializing
     #+BEGIN_SRC shen
       (define native-map->shen
         _ N    -> N   where (isNumber N)
         ...
         Lang O ->
            (let PairsOrEmpty (nativePairs O)
               (if (absvector? PairsOrEmpty)
                   (vector-map
                      (/. X
                        (with-snd
                          (function (native-map->shen Lang))
                          X))
                      (nativePairs O))
                   PairsOrEmpty))
               where (isObject O)
         _ Wut  -> (error "Unrecognized: ~A" Wut))
     #+END_SRC
** Interop
   - Convert between Ruby/JSON to Shen
     #+BEGIN_SRC shen
       {:x => [1,2,3],
        :y => {:ya => {},
               :yb => nil     (@v
              }            =>   (@p "x" [1 2 3])
       }                        (@p "y" (@v
       {x: [1,2 3],                       (@p "ya" (@v <>))
        y: {ya: {},                       (@p "yb" nil))))
            yb: null
           }
       }
     #+END_SRC

** Interop
   - On the Ruby side...
     #+BEGIN_SRC shen
       class << shen
         def isObject(x)
           x.is_a?(Hash)
         end
       end
     #+END_SRC
   - On the JavaScript side ...
     #+BEGIN_SRC shen
       Shen.defun("isObject",1,function(args){
         // Yes, I know this is buggy!
         return typeof(args[0]) === "object";
       });
       Shen.defun("isObject",1,function(args){
         return _.isObject(args[0]);
       });
     #+END_SRC
** Interop
   - Calling Shen from Ruby/JavaScript ...
     #+BEGIN_SRC ruby
       shen.send(              Shen.call_by_name(
         "native-map->shen",     "native-map->shen", [
         "rb",                    "js",
          {:x => [1,2,3],         {x: [1,2 3],
           :y => {:ya => {},       y: {ya: {},
                  :yb => nil           yb: null
                 }                    }
          })                      }]);
     #+END_SRC
** Interop
   - The FFI is *not* standardized
   - This is good!
   - Ports can do whatever they want
     - Ruby coerces Arrays to Shen lists
     - JavaScript does not, but has equality issues
     - Cyclomatic complexity ensues
   - Equal representation is hard and annoying!
** JSON Typing
   - Type check at run-time!
     #+BEGIN_SRC
     (define user-input-key-value ->
        (let Key (input)
             Value (input)
             Pair (@p (make-string "~A" Key) Value)
             Form [object | [(helper Pair)]]
          (shen.typecheck (shen.cons_form Form) A)))
     #+END_SRC
     #+BEGIN_SRC shen
       > (user-input-key-value)
       phone
       [314 555 5555]
       =>
       [object [kv [phone * [list number]]]]
     #+END_SRC
